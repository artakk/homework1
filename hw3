// 1-3-y kisata

// 1.Write a function, which receives 
//an array as an argument which elements arrays of
// numbers. Find biggest negative number
// of each array. Return product of that
// numbers.If there is not any negative 
//number in an array, ignore that one. Check that
// items of the given array are arrays.


const arr2 = [[-21,32,-1],[-2,-3,23],[-4,43,34]]
const arr22 = [[3,4],[11,0],[5,6,7,8]];
const arr222 = [1,2,3]
let k = [];

function abc(arr) {
    for (let i = 0; i < arr.length; i++) {
        if (Array.isArray(arr[i])) {
for (let j = 0; j < arr[i].length; j++) {
if ( arr[i][j] < 0 ) {
 Math.max(...arr[i]);
    return k.push(arr);
} 
        return "No negatives.";
} 
    }
        return "Invalid argument.";
}
}

console.log(abc(arr2))
console.log(abc(arr22))
console.log(abc(arr222))



// 2.Given an array of strings and numbers. 
// Print the number of integers and the number
// of strings in the array.
let str = '';
let num1 = [];
const arrr = [1,2,'hi',2,'asd'];
function strAndNum (arr) {
    for (let i = 0; i < arr.length; i++) {
        if(arr[i] % 2 !== 0 && arr[i] % 2 !== 1) {
            num1.push(arr[i]);
        } 
            
             return arr;
        
    }
}
console.log(strAndNum(arrr))


// 3.Given an array consisting from the arrays of 
//numbers (like a two-dimensional array).
//Find sum of each row and print them as an array.

const arr3 = [[1,2,3,4],[4,2,1,5],[5,8,7,-7]];
const arr33 = [[33,3],[8],[2,-4],[1,0,-2]];
const arr333 = [[1],[2],[3],[4]];
const newArr3 = [];
let sum = 0;

function sumEachRow(a) {
    for (let i = 0; i < a.length; i++) {
       if (Array.isArray(a[i])) {
           for (let j = 0; j < a[i].length; j++) {
        sum = a[i].reduce((acc,val) => acc + val,0);;
        return  newArr3.push(sum) ;
       }
    }
       return  a;
    }
}
sumEachRow(arr3)

console.log(newArr3)





// 4.Given an array of integers. Write a function 
// that return new array from first array,
// where removed even numbers, and odd numbers was 
// multiplied with new array
// length


const arr = [2,1,4,5,6,9,8];
arr1 = arr.filter((num) => (num % 2 !== 0));
const newArr = (val) => val * arr1.length;
let result = arr1.map(newArr)
console.log(result);

// const isOdd = (num) => (num % 2 !== 0);


// 5.Given an array of numbers. Create an array 
// containing only elements once.

 const arr5 = [1,1,2,3,3,4,5,5,6,7,7];
const uniqueVals = Array.from(new Set(arr5))
console.log(uniqueVals)

// 6. Given an array. Create the array which elements 
// are products between twoneighbours.

const array = [3,7,12,5,20,0];
const array1 = [1,1,4,32,6]
const newAr = array.map(function (curVal,i,arr) { 
      next = arr[i + 1];
    return curVal * next;
});
let n = newAr.pop()
console.log(newAr)
